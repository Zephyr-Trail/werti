WERTi runs on Apache Tomcat version 5 or higher. Version 6 or higher is
recommended. Note that your Tomcat installation will have to make use of log4j.
See [1] for details on how you can set up log4j for Tomcat.

You will have to adjust some paths on your system for everything to make work
out as expected.

*** System-specific locations. (Compile time)
*******

The file build.properties should be adjusted to hold paths that make sense
on your given system. The paths currently needed are the following:

hmmtagger.models: a folder containing all models for the uima-an-tagger.
ptbtagger.models: a folder containing all models for the Stanford PoS tagger.

catalina.home: the base directory of your tomcat installation

libraries.locations: a folder containing the jar files needed to compile WERTi.
See below for a full list.

gwt-user.location = explicit path to the location of the gwt-user.jar library
gwt-dev.location = explicit path to the location of the gwt-dev-${OS}.jar
library

* Notes:

Please note that the use of the Stanford tagger is currently discouraged. In
fact, it doesn't work with the current source and will need adjustments.

The explicit locations for the gwt jars are needed to compile the gwt models
from within ant instead of using the helper scripts. Since we'll have a module
for every enhancement type, this would clutter up the root directory.


*** System-specific locations. (Runtime)
******

The file www/WERTi.properties contains runtime paths and adjustments that
control the default behaviour of the WERTi server-side code. Note that there
is no way you can reference this file from client-side GWT code, since it is
not accessible to the client.

ptbtagger.res: the location the ant build file copies the models to under the
build directory. No need to change this.
ptbtagger.${LANG}: The location of the language specific tagger models for the
Stanford tagger under the base path.

hmmtagger.res: the location the ant build file copies the models to under the
build directory. No need to change this.
hmmtagger.${LANG}: The location of the language specific tagger models for the
uima-an-tagger under the base path.

descriptorPath = the base path of the descriptors under the build directory. No
need to change this.

enhancer.${types}: The post-processing descriptor to use. This can be aggregate
or primitive. default is used by most tests.

aggregate.${types}: the pre-processing descriptor to use. This one does the
annotation work. Typically, this is an aggregate descriptor, hence the name.

this-server: You will probably have to change this. It denotes the server the
GWT-scripts reside on. This is a bit hackish for now, I don't know if it'll
work when deploying to a 'real' server. Will have to look into this.

*** Building
******

Currently, we do not support deploying as .war, for various reasons. Most of all,
it would be a giant 60M+ .war file. Big war. No need to bother for now. Just
copying the /bin directory to tomcat or even symlinking from the webapps base
folder to /bin should work fine for now. This will be addressed in the future.
(Actually, the real reasons are twofold: security permissions with Tomcat and
the fact that we can't write to a .war from within the webapp, but we need to
create temporary files accessible to the application from within the server.
The way to solve this would likely be to use Pushlets, but that seems to be
rather complicated.)

The ant task 'all' should build everything you need.

The ant task 'reload' does nothing but touch the file bin/WEB-INF/web.xml,
which Tomcat monitors by default to find out when to reload a servlet context.
Use this if you symlink the webapp folder to the output directory 'bin'.

[1] http://tomcat.apache.org/tomcat-6.0-doc/logging.html
