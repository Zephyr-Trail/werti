# Hacking WERTi

This document tells you how to modify WERTi.

## The File Hierarchy

	werti/
		desc/
		docs/
		metadata/
		src/
		testcases/
		pom.xml
		COPYRIGHT
		INSTALLATION.markdown
		TODO

## The UIMA Descriptor Files

All UIMA descriptor files are located in `desc/`, which has the following
layout:

	desc/
		annotators/
		enhancers/
		operators/
		testers/
		WERTiTypeSystem.xml

The type system, which is global for all WERTi descriptors, is contained in
`WERTiTypeSystem.xml`.

All annotation on web content is performed by the descriptors in `annotators`.
This includes the two sub-categories `taggers` and `relevance`, for tagging and
relevance annotations respectively.

Different client side enhancement anchors are set up using the files in
`enhancers`.

`operators` contains aggregate descriptors to coordinate the work flow between
all other components.

Finally, `testers` are miscellaneous files used for testing. Feel free to add
your own.

## Documentation

The paper documenting the initial work on WERTi can be found in `docs/paper`.
Installation instructions and a readme are in the toplevel directory.

Javadocs and a complete API can be generated by calling the following command:

	mvn javadoc:javadoc

It will appear in `target/site/apidocs`.

## The Source Code

The source code has the following layout:

	src/
		main/
			java/
			resources/
			webapp/
		test/

The `test` directory *would* hold nice JUnit tests, but so far, none exist.
The `main` directory holds the Java sources, the resources WERTi needs to run
(for now, those are just the tagger model files) and all files the webapp needs
to run (WEB-INF/web.xml and logging properties). Anything accessible to the
(server side) application at run time should go in the folder `webapp`. It also
contains the output of GWT-compilations.

## Compiling the Sources

The standard Maven targets will help you. Type `mvn compile` to compile and
`mvn clean` to delete any results of previous compilations. `mvn package`
creates the `.war` file to deploy on a server. It should contain everything,
including a set of model files and all libraries, which will make it incredibly
big. All compilation results are in the `target` folder.

## Testing

Testing WERTi involves running it in GWT hoted mode for debugging of client-side
JavaScript code, and usually analysing the logging output.

### Note


### GWT
To test WERTi in hosted mode, you need to be running a Tomcat webserver. The
current `pom.xml` assumes that Tomcat is running on `localhost:8080`, so on
your machine, on port 8080. You can change that in the pom.xml. I will look
into making this a bit easier to adjust.

**Ipmortant Note:** you *need* to adjust `WERTi.properties`, too, to inform
WERTi about what server it is running on if you are not deploying it from this
port and your local machine.

### Logging

The logging configuration is in
`src/main/webapp/WEB-INF/classes/log4j.properties`.

## Setting up Eclipse

Eclipse is a powerful integrated IDE for Java. WERTi will strive to remain as
compatible as possible with Eclipse. Currently, only the newest version of
Eclipse is supported, Ganymede. The following documentation shall help you
getting started with testing, building and debugging WERTi inside the Eclipse
IDE.

### Eclipse Maven Plugin

As an alternative to a manual setup for Eclipse, you can use the Eclipse Maven
Plugin located at [Codehaus](http://m2eclipse.codehaus.org/). Please refer to
the Documentation of the plug-in for importing projects.

### Manual Eclipse Maven Setup

Maven can generate all necessary files (including `.classpath`, complete with
sources and documentation) with one command:

	mvn eclipse:eclipse -DdownloadSources=true -DdownloadJavadocs=true

Unfortunately, this will not give you sources and JDocs for every class, but at
least for some. You might be interested in adding JavaDoc-Entries for the
LingPipe tagger, if you will use it.

Now you should import the project into the Eclipse workspace. If you have
previously imported it, issue

	mvn eclipse:clean

first.

Maven set up Eclipse to search for libraries under a classpath variable named
`M2_REPO`. You should add this classpath variable (globally) to Eclipse. On
most UNIX-like systems, this will point to `$HOME/.m2/repository`.

### GWT Setup

By now you should be able to compile the project. At this stage, it is probably
not a bad idea to type

	mvn gwt:gwt

at a command prompt, so maven generates all needed files and downloads all
dependencies. It will present you a hosted mode browser, running WERTi.

Now you need to set up an Apache Tomcat Server inside Eclipse, under the
'Servers' entry in Eclipse's preferences.

In order to enable debugging in hosted mode, select the project, and edit the
debugging configuration und Run->Debug Configurations… Select 'Java
Application', create a new one, called WERTi. Set the main class to
`com.google.gwt.dev.GWTShell`.

Click on the 'Arguments' tab inside the same dialog. As program arguments, type:

	-out target/WERTi/WEB-INF/classes
	-noserver -port 8080 -logLevel ALL
	WERTi/org.werti.WERTi/WERTi.html

and as VM arguments type

	-Xmx512M

Note that you have to substitute your Tomcat's port number for 8080 in the
program's arguments.

Next, click on the 'Classpath' tab. Click on 'User Entries', then on the button
'Advanced…'.  Then, select 'Add Folders', and add `src/main/java`.

Then all you have to do is click on 'Apply' and then 'Debug'.
